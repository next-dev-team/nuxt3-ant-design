# generated by patch-package 6.4.14
#
# declared package:
#   @vue/apollo-composable: ^4.0.0-beta.1
#
diff --git a/node_modules/@vue/apollo-composable/dist/useQuery.d.ts b/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
index 02a0968..4dd4270 100644
--- a/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
+++ b/node_modules/@vue/apollo-composable/dist/useQuery.d.ts
@@ -38,15 +38,15 @@ export interface UseQueryReturn<TResult, TVariables> {
 /**
  * Use a query that does not require variables or options.
  * */
-export declare function useQuery<TResult = any>(document: DocumentParameter<TResult, undefined>): UseQueryReturn<TResult, undefined>;
+export declare function useQuery<TResult = any>(document: DocumentParameter<TResult, undefined>): Promise<UseQueryReturn<TResult, undefined>>;
 /**
  * Use a query that has optional variables but not options
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>): Promise<UseQueryReturn<TResult, TVariables>>;
 /**
  * Use a query that has required variables but not options
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables: VariablesParameter<TVariables>): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables: VariablesParameter<TVariables>): Promise<UseQueryReturn<TResult, TVariables>>;
 /**
  * Use a query that requires options but not variables.
  */
@@ -54,5 +54,5 @@ export declare function useQuery<TResult = any>(document: DocumentParameter<TRes
 /**
  * Use a query that requires variables and options.
  */
-export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables: VariablesParameter<TVariables>, options: OptionsParameter<TResult, TVariables>): UseQueryReturn<TResult, TVariables>;
-export declare function useQueryImpl<TResult, TVariables extends OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables?: VariablesParameter<TVariables>, options?: OptionsParameter<TResult, TVariables>, lazy?: boolean): UseQueryReturn<TResult, TVariables>;
+export declare function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables: VariablesParameter<TVariables>, options: OptionsParameter<TResult, TVariables>): Promise<UseQueryReturn<TResult, TVariables>>;
+export declare function useQueryImpl<TResult, TVariables extends OperationVariables>(document: DocumentParameter<TResult, TVariables>, variables?: VariablesParameter<TVariables>, options?: OptionsParameter<TResult, TVariables>, lazy?: boolean): Promise<UseQueryReturn<TResult, TVariables>>;
